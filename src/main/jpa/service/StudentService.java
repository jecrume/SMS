package service;

import dao.StudentDAO;
import entitymodels.Course;
import entitymodels.Student;
import org.hibernate.query.NativeQuery;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.util.List;
import java.util.Objects;
/*
@author John Crume
This class is the implementation of the StudentDAO class
 */
public class StudentService implements StudentDAO {
    //create the EntityManager variable
    private EntityManager em;
    /*constructor for the StudentService class that initializes
     EntityManagerFactory and the Entity Manager
   */
    public StudentService(){
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("sms");
        em = emf.createEntityManager();
    }
    /*
    This method reads the student table in your database and returns the data as a List<Student>
     */
    @Override
    public List<Student> getAllStudents() {

        try{

            String sql = "SELECT * FROM student";
            NativeQuery<Student> query = (NativeQuery<Student>) em.createNativeQuery(sql,Student.class);
            List<Student> allStudents = query.getResultList();
            return allStudents;
        } catch (Exception e){
            e.printStackTrace();
            return null;
        }

    }
    /*
    This method takes a Student’s email as a String and parses the student list for a Student with that
     email and returns a Student Object.
     */
    @Override
    public Student getStudentByEmail(String sEmail) {

        try{

            String sql = "SELECT u FROM Student u WHERE u.sEmail = :email";
            TypedQuery<Student> query = em.createQuery(sql,Student.class);
            query.setParameter("email",sEmail);

            Student student = query.getSingleResult();

            return student;

        }catch(Exception e){
            System.out.println("getStudentbyEmail: Email not found or Invalid. Login Failed. Good bye");
            e.printStackTrace();
            return null;
        }

    }

        /*
            This method takes two parameters: the first one is the user email and the second one is the
            password from the user input. Return whether(true) or not (false) a student was found.
         */
    @Override
    public boolean validateStudent(String sEmail, String sPassword) {
        try{
            Student s = getStudentByEmail(sEmail);
            if(Objects.isNull(s)){
                return false;
            }else if(s.getsEmail().equals(sEmail) && s.getsPass().equals(sPassword)){
                return true;
            }else{
                return false;
            }

        }catch(Exception e){
            System.out.println("validateStudent: ");
            e.printStackTrace();
            return false;
        }


    }
    /*
    Private helper method that is called in registerStudentToCourse
    It takes a student object and a course id and checks if the student
    is enrolled in the given course or not. Returns true if the course id is in the
    student's course list and false if it is not.
     */
    private boolean checkIfEnrolled(int id, Student student){
        List <Course> courseList = student.getsCourses();
        boolean isInList = false;
        for(int i = 0; i< courseList.size();i++){
            if(id == courseList.get(i).getcId()){
                isInList = true;
            }
        }
        return isInList;
    }

    /*
    this method takes a Student’s email and a Course ID. It checks in the join table (i.e. Student_Course) generated by
     JPA to find if a Student with that Email is currently attending a Course with that ID. If the Student
     is not attending that Course, register the student to that course; otherwise not.
     */
    @Override
    public void registerStudentToCourse(String sEmail, int cId) {
            try{
                Student student = getStudentByEmail(sEmail);
                if(Objects.isNull(student)){
                    System.out.println("Student not found. Course not added.");
                }else{
                    boolean alreadyEnrolled =checkIfEnrolled(cId,student);
                    if(!alreadyEnrolled){

                        String sql = "SELECT u FROM Course u WHERE u.id = :cId";
                        TypedQuery<Course> query = em.createQuery(sql,Course.class);
                        query.setParameter("cId",cId);

                        Course newCourse = query.getSingleResult();

                        if(student.getsCourses().add(newCourse)){
                            System.out.println("Course added successfully");
                        };

                        em.getTransaction().begin();
                        em.merge(student);
                        em.getTransaction().commit();


                    }
                }
            }catch(Exception e){
                System.out.println("registerStudentToCourse: ");
                e.printStackTrace();
            }
    }

    /*
    This method takes a Student’s Email as a parameter and
    would find all the courses a student is registered.
     */
    @Override
    public List<Course> getStudentCourses(String sEmail) {

        Student student = getStudentByEmail(sEmail);

        List <Course> studentCourseList = student.getsCourses();

        return studentCourseList;
    }
}
